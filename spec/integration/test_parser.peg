pattern <- 'action1:' rs -> { $$ = 110; }
         / 'char1:' [1] rs -> { $$ = 210; }
         / 'char2:' [123] rs -> { $$ = 220; }
         / 'char3:' [1-3] rs -> { $$ = 230; }
         / 'char4:' [^a] rs -> { $$ = 240; }
         / 'char5:' [^abc] rs -> { $$ = 250; }
         / 'char6:' [^a-z] rs -> { $$ = 260; }
         / 'capt1:' <[123]> rs -> { $$ = 310 + $1.parse::<i32>().unwrap_or(0); }
         / 'pred1:' !'1' [0-3] rs -> { $$ = 410; }
         / 'quan1:' 'a'* '1' rs -> { $$ = 510; }
         / 'quan2:' [a]+ '2' rs -> { $$ = 520; }
         / 'quan3:' 'a'? '3' rs -> { $$ = 530; }
         / 'quan4:' [a]? '4' rs -> { $$ = 540; }
         / 'ref1:' child rs -> { $$ = 610; }
         / 'calc:' e:calc_expr rs -> { $$ = e; }
child <- '0' / '123' / '456'

calc_expr <- l:calc_expr '+' r:calc_factor { $$ = l + r; }
           / l:calc_expr '-' r:calc_factor { $$ = l - r; }
           / e:calc_factor { $$ = e; }
calc_factor <- l:calc_factor '*' r:calc_unary { $$ = l * r; }
             / l:calc_factor '/' r:calc_unary rs -> {
                   if r == 0 {
                       println!("Div zero error");
                       $$ = 0;
                   } else {
                       $$ = l / r;
                   }
               }
             / e:calc_unary { $$ = e; }
calc_unary <- '+' e:calc_primary { $$ = e; }
            / '-' e:calc_primary { $$ = -e; }
            / e:calc_primary     { $$ = e; }
calc_primary <- < [0-9]+ > rs -> { $$ = $1.parse::<i32>().unwrap_or(0); }
              / '(' e:calc_expr ')' { $$ = e; }

%earlysource rs -> {
  use std::ffi::CStr;
  use std::os::raw::{c_char,c_int};
}

%latesource rs -> {
  #[unsafe(no_mangle)]
  pub extern "C" fn parse(cstr: *const c_char) -> c_int {
      let bytes = unsafe { CStr::from_ptr(cstr) }.to_bytes();
      let cursor = std::io::Cursor::new(bytes);
      let mut parser = Packcr::new(cursor);
      match parser.parse() {
        Some(value) => value,
        None => -1,
      }
      
  }
}
