class Packcr
  def initialize(path)
    @path = path.to_s
  end

  def run
    Context.new(@path.to_s) do |ctx|
      if !ctx.parse || !ctx.generate
        raise "PackCC error"
      end
    end
  end
end

class Packcr::Stream
  def initialize(io, name, line)
    @io = io
    @name = name
    @line = line
  end

  def putc(c)
    @io.putc(c)
    if @line && c.chr == "\n"
      @line += 1
    end
  end

  def write(s)
    @io.write(s)
    if @line
      @line += s.count("\n")
    end
  end

  def printf(...)
    write(sprintf(...))
  end
end

require "packcr.so"

class Packcr::Context
  def init(path)
    @iname = path
    @ifile = File.open(path, "rb")
    dirname = File.dirname(path)
    basename = File.basename(path, ".*")
    if dirname == "."
      path = basename
    else
      path = File.join(dirname, basename)
    end
    @sname = path + ".c"
    @hname = path + ".h"
    @hid = File.basename(@hname).upcase.gsub(/[^A-Z0-9]/, "_")

    @errnum = 0
    @linenum = 0
    @charnum = 0
    @linepos = 0
    @bufpos = 0
    @bufcur = 0

    @esource = []
    @eheader = []
    @source = []
    @header = []
    @rules = []
    @rulehash = {}
  end

  def value_type
    @value_type || "int"
  end

  def auxil_type
    @auxil_type || "void *"
  end

  def prefix
    @prefix || "pcc"
  end

  def auxil_def
    type = auxil_type
    "#{type}#{type =~ /\*$/ ? "" : " "}"
  end

  def value_def
    type = value_type
    "#{type}#{type =~ /\*$/ ? "" : " "}"
  end

  def generate
    File.open(@hname, "wt") do |hio|
      hstream = ::Packcr::Stream.new(hio, @hname, @lines ? 0 : nil)

      hstream.write "/* A packrat parser generated by PackCR %s */\n\n" %  ::Packcr::VERSION

      @eheader.each do |code|
        hstream.write_code_block(code, 0, @iname)
      end
      hstream.write "\n" if !@eheader.empty?

      hstream.printf(<<~EOS)
        #ifndef PCC_INCLUDED_#{@hid}
        #define PCC_INCLUDED_#{@hid}

      EOS

      @header.each do |code|
        hstream.write_code_block(code, 0, @iname)
      end

      hstream.write(<<~EOS)
        #ifdef __cplusplus
        extern "C" {
        #endif

        typedef struct #{@prefix}_context_tag #{@prefix}_context_t;

        #{@prefix}_context_t *#{@prefix}_create(#{auxil_def}auxil);
        int #{@prefix}_parse(#{@prefix}_context_t *ctx, #{value_def}*ret);
        void #{@prefix}_destroy(#{@prefix}_context_t *ctx);

        #ifdef __cplusplus
        }
        #endif

        #endif /* !PCC_INCLUDED_#{@hid} */
      EOS
    end

    File.open(@sname, "wt") do |sio|
      sstream = ::Packcr::Stream.new(sio, @sname, @lines ? 0 : nil)
      sstream.write "/* A packrat parser generated by PackCR %s */\n\n" % ::Packcr::VERSION
      _generate(sstream)
    end

    if !@errnum.zero?
      File.unlink(@hname)
      File.unlink(@sname)
      return false
    end
    true
  end
end

require "packcr/version"
