/* A packrat parser generated by PackCR <%= Packcr::VERSION %> */

<%- @esource.each do |code| -%>
<%=   hstream.get_code_block(code, 0, @iname) -%>
<%- end -%>
<%- if !@esource.empty? -%>

<%- end -%>
#ifdef _MSC_VER
#undef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif /* _MSC_VER */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

<%- @eheader.each do |code| -%>
<%=   hstream.get_code_block(code, 0, @iname) -%>
<%- end -%>
<%- if !@eheader.empty? -%>

<%- end -%>

<%- @header.each do |code| -%>
<%=   hstream.get_code_block(code, 0, @iname) -%>
<%- end -%>
#ifdef __cplusplus
extern "C" {
#endif

#ifdef __
#undef __
#endif

#ifdef __cplusplus
}
#endif

<%- @source.each do |code| -%>
<%=   hstream.get_code_block(code, 0, @iname) -%>
<%- end -%>

typedef struct pcc_value_tag {
    <%= value_def %>value;
} pcc_value_t;

typedef <%= auxil_def %>pcc_auxil_t;

static VALUE cLrEntry, cLrHead, cLrAnswer, cThunkLeaf, cThunkNode, cThunkChunk, cValue;

<% if @utf8 -%>
static size_t pcc_get_char_as_utf32(VALUE rctx, int *out) { /* with checking UTF-8 validity */
    int c, u;
    size_t n;
    if (NUM2SIZET(rb_funcall(rctx, rb_intern("refill_buffer"), 1, SIZET2NUM(1))) < 1) return 0;
    c = (int)(unsigned char)RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer")))[NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur")))];
    n = (c < 0x80) ? 1 :
        ((c & 0xe0) == 0xc0) ? 2 :
        ((c & 0xf0) == 0xe0) ? 3 :
        ((c & 0xf8) == 0xf0) ? 4 : 0;
    if (n < 1) return 0;
    if (NUM2SIZET(rb_funcall(rctx, rb_intern("refill_buffer"), 1, SIZET2NUM(n))) < n) return 0;
    switch (n) {
    case 1:
        u = c;
        break;
    case 2:
        u = c & 0x1f;
        c = (int)(unsigned char)RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer")))[NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) + 1];
        if ((c & 0xc0) != 0x80) return 0;
        u <<= 6; u |= c & 0x3f;
        if (u < 0x80) return 0;
        break;
    case 3:
        u = c & 0x0f;
        c = (int)(unsigned char)RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer")))[NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) + 1];
        if ((c & 0xc0) != 0x80) return 0;
        u <<= 6; u |= c & 0x3f;
        c = (int)(unsigned char)RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer")))[NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) + 2];
        if ((c & 0xc0) != 0x80) return 0;
        u <<= 6; u |= c & 0x3f;
        if (u < 0x800) return 0;
        break;
    case 4:
        u = c & 0x07;
        c = (int)(unsigned char)RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer")))[NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) + 1];
        if ((c & 0xc0) != 0x80) return 0;
        u <<= 6; u |= c & 0x3f;
        c = (int)(unsigned char)RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer")))[NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) + 2];
        if ((c & 0xc0) != 0x80) return 0;
        u <<= 6; u |= c & 0x3f;
        c = (int)(unsigned char)RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer")))[NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) + 3];
        if ((c & 0xc0) != 0x80) return 0;
        u <<= 6; u |= c & 0x3f;
        if (u < 0x10000 || u > 0x10ffff) return 0;
        break;
    default:
        return 0;
    }
    if (out) *out = u;
    return n;
}

<% end -%>
static VALUE pcc_apply_rule(VALUE rctx, VALUE rrule, VALUE rthunks, VALUE rvalues, VALUE rindex) {
    ID rule = SYM2ID(rrule);
    size_t index = NUM2SIZET(rindex);
    const size_t p = NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos"))) + NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur")));
<%- if @location -%>
    const VALUE p_loc = rb_funcall(rb_ivar_get(rctx, rb_intern("@pos_loc")), rb_intern("+"), 1, rb_ivar_get(rctx, rb_intern("@cur_loc")));
<%- end -%>
    VALUE b = Qtrue;
    VALUE rh, ra, rc = Qnil, rlrtable = rb_ivar_get(rctx, rb_intern("@lrtable"));
    ra = rb_funcall(rlrtable, rb_intern("get_answer"), 2, SIZET2NUM(p), ID2SYM(rule));
    rh = rb_funcall(rlrtable, rb_intern("get_head"), 1, SIZET2NUM(p));
    if (!NIL_P(rh)) {
        VALUE rinvol = rb_ivar_get(rh, rb_intern("@invol"));
        ID rule_name = SYM2ID(rb_ivar_get(rh, rb_intern("@rule_name")));
        if (NIL_P(ra) && rule != rule_name && NIL_P(rb_funcall(rinvol, rb_intern("[]"), 1, ID2SYM(rule)))) {
            b = Qfalse;
            rc = Qnil;
        } else {
            VALUE reval = rb_ivar_get(rh, rb_intern("@eval"));
            if (RTEST(rb_funcall(reval, rb_intern("delete"), 1, ID2SYM(rule)))) {
                rc = rb_funcall(rctx, rule, 0);
                b = Qfalse;
                ra = rb_funcall(cLrAnswer, rb_intern("new"), <% if @location %>3<% else %>2<% end %>, ID2SYM(rb_intern("chunk")), SIZET2NUM(NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos"))) + NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))))<% if @location %>, rb_funcall(rb_ivar_get(rctx, rb_intern("@pos_loc")), rb_intern("+"), 1, rb_ivar_get(rctx, rb_intern("@cur_loc")))<% end %>);
                rb_ivar_set(ra, rb_intern("@chunk"), rc);
                rb_funcall(rlrtable, rb_intern("hold_answer"), 2, SIZET2NUM(p), ra);
            }
        }
    }
    if (RTEST(b)) {
        if (!NIL_P(ra)) {
            rb_ivar_set(rctx, rb_intern("@cur"), SIZET2NUM(NUM2SIZET(rb_ivar_get(ra, rb_intern("@pos"))) - NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos")))));
<%- if @location -%>
            rb_ivar_set(rctx, rb_intern("@cur_loc"), rb_funcall(rb_ivar_get(ra, rb_intern("@pos_loc")), rb_intern("-"), 1, rb_ivar_get(rctx, rb_intern("@pos_loc"))));
<%- end -%>
            ID type = SYM2ID(rb_ivar_get(ra, rb_intern("@type")));
            if (type == rb_intern("lr")) {
                {
                    VALUE rlr = rb_ivar_get(ra, rb_intern("@lr"));
                    VALUE rhead = rb_ivar_get(rlr, rb_intern("@head"));
                    if (NIL_P(rhead)) {
                        rhead = rb_funcall(cLrHead, rb_intern("new"), 0);
                        rb_ivar_set(rlr, rb_intern("@head"), rhead);
                        rb_ivar_set(rhead, rb_intern("@rule_name"), ID2SYM(rule));
                        rb_funcall(rlrtable, rb_intern("hold_head"), 2, SIZET2NUM(p), rhead);
                    }
                }
                {
                    size_t i = RARRAY_LEN(rb_ivar_get(rctx, rb_intern("@lrstack")));
                    VALUE rlr;
                    while (i > 0) {
                        VALUE rinvol;
                        i--;
                        VALUE rlrentry = rb_funcall(rb_ivar_get(rctx, rb_intern("@lrstack")), rb_intern("[]"), 1, SIZET2NUM(i));
                        VALUE rentry_head, ranswer_head;
                        rentry_head = rb_ivar_get(rlrentry, rb_intern("@head"));
                        rlr = rb_ivar_get(ra, rb_intern("@lr"));
                        ranswer_head = rb_ivar_get(rlr, rb_intern("@head"));
                        if (rentry_head == ranswer_head) break;
                        rb_ivar_set(rlrentry, rb_intern("@head"), ranswer_head);
                        rinvol = rb_ivar_get(ranswer_head, rb_intern("@invol"));
                        rb_funcall(rinvol, rb_intern("[]="), 2, rb_ivar_get(rlrentry, rb_intern("@rule")), Qtrue);
                    }
                    rlr = rb_ivar_get(ra, rb_intern("@lr"));
                    rc = rb_ivar_get(rlr, rb_intern("@seed"));
                }
            } else if (type == rb_intern("chunk")) {
                rc = rb_ivar_get(ra, rb_intern("@chunk"));
            }
        }
        else {
            VALUE rentry = rb_funcall(cLrEntry, rb_intern("new"), 0);
            rb_ivar_set(rentry, rb_intern("@rule"), ID2SYM(rule));
            rb_funcall(rb_ivar_get(rctx, rb_intern("@lrstack")), rb_intern("push"), 1, rentry);
            ra = rb_funcall(cLrAnswer, rb_intern("new"), <% if @location %>3<% else %>2<% end %>, ID2SYM(rb_intern("lr")), SIZET2NUM(p)<% if @location %>, p_loc<% end %>);
            rb_ivar_set(ra, rb_intern("@lr"), rentry);
            rb_funcall(rlrtable, rb_intern("set_answer"), 3, SIZET2NUM(p), ID2SYM(rule), ra);
            rc = rb_funcall(rctx, rule, 0);
            rb_funcall(rb_ivar_get(rctx, rb_intern("@lrstack")), rb_intern("pop"), 0);
            rb_ivar_set(ra, rb_intern("@pos"), SIZET2NUM(NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos"))) + NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur")))));
<%- if @location -%>
            rb_ivar_set(ra, rb_intern("@pos_loc"), rb_funcall(rb_ivar_get(rctx, rb_intern("@pos_loc")), rb_intern("+"), 1, rb_ivar_get(rctx, rb_intern("@cur_loc"))));
<%- end -%>
            if (NIL_P(rb_ivar_get(rentry, rb_intern("@head")))) {
                rb_funcall(ra, rb_intern("set_chunk"), 1, rc);
            }
            else {
                ID rule_name;
                VALUE rlr = rb_ivar_get(ra, rb_intern("@lr"));
                rb_ivar_set(rentry, rb_intern("@seed"), rc);
                rh = rb_ivar_get(rlr, rb_intern("@head"));
                rule_name = SYM2ID(rb_ivar_get(rh, rb_intern("@rule_name")));
                if (rule_name != rule) {
                    rc = rb_ivar_get(rlr, rb_intern("@seed"));
                    ra = rb_funcall(cLrAnswer, rb_intern("new"), <% if @location %>3<% else %>2<% end %>, ID2SYM(rb_intern("chunk")), SIZET2NUM(NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos"))) + NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))))<% if @location %>, rb_funcall(rb_ivar_get(rctx, rb_intern("@pos_loc")), rb_intern("+"), 1, rb_ivar_get(rctx, rb_intern("@cur_loc")))<% end %>);
                    rb_ivar_set(ra, rb_intern("@chunk"),  rc);
                    rb_funcall(rlrtable, rb_intern("hold_answer"), 2, SIZET2NUM(p), ra);
                }
                else {
                    VALUE rseed = rb_ivar_get(rlr, rb_intern("@seed"));
                    VALUE rchunk;
                    rb_funcall(ra, rb_intern("set_chunk"), 1, rseed);
                    rchunk = rb_ivar_get(ra, rb_intern("@chunk"));
                    if (NIL_P(rchunk)) {
                        rc = Qnil;
                    }
                    else {
                        rb_funcall(rlrtable, rb_intern("set_head"), 2, SIZET2NUM(p), rh);
                        for (;;) {
                            rb_ivar_set(rctx, rb_intern("@cur"), SIZET2NUM(p - NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos")))));
<%- if @location -%>
                            rb_ivar_set(rctx, rb_intern("@cur_loc"), rb_funcall(p_loc, rb_intern("-"), 1, rb_ivar_get(rctx, rb_intern("@pos_loc"))));
<%- end -%>
                            rb_funcall(rh, rb_intern("invol_to_eval"), 0);
                            rc = rb_funcall(rctx, rule, 0);
                            if (NIL_P(rc) || NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos"))) + NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) <= NUM2SIZET(rb_ivar_get(ra, rb_intern("@pos")))) break;
                            rb_funcall(ra, rb_intern("set_chunk"), 1, rc);
                            rb_ivar_set(ra, rb_intern("@pos"), SIZET2NUM(NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos"))) + NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur")))));
<%- if @location -%>
                            a->pos_loc = pcc_location_add(rb_ivar_get(rctx, rb_intern("@pos_loc")), ctx->cur_loc);
<%- end -%>
                        }
                        rb_funcall(rlrtable, rb_intern("set_head"), 2, SIZET2NUM(p), Qnil);
                        rb_ivar_set(rctx, rb_intern("@cur"), SIZET2NUM(NUM2SIZET(rb_ivar_get(ra, rb_intern("@pos"))) - NUM2SIZET(rb_ivar_get(rctx, rb_intern("@pos")))));
<%- if @location -%>
                        rb_ivar_set(rctx, rb_intern("@cur_loc"), rb_funcall(rb_ivar_get(ra, rb_intern("@pos_loc")), rb_intern("-"), 1, rb_ivar_get(rctx, rb_intern("@pos_loc"))));
<%- end -%>
                        rchunk = rb_ivar_get(ra, rb_intern("@chunk"));
                        rc = rchunk;
                    }
                }
            }
        }
    }
    if (NIL_P(rc)) return Qfalse;
    if (!NIL_P(rvalues)) {
        rb_funcall(rvalues, rb_intern("[]="), 2, SIZET2NUM(index), rb_funcall(cValue, rb_intern("new"), 0)); /* in case */
    }
    {
        VALUE rt = rb_funcall(cThunkNode, rb_intern("new"), 3, rb_ivar_get(rc, rb_intern("@thunks")), rvalues, SIZET2NUM(index));
        rb_funcall(rthunks, rb_intern("push"), 1, rt);
    }
    return Qtrue;
}

static VALUE pcc_do_action(VALUE rctx, VALUE rthunks, VALUE rvalues, VALUE rindex) {
    size_t index = NUM2SIZET(rindex);
    size_t i;
    for (i = 0; i < (size_t)RARRAY_LEN(rthunks); i++) {
        VALUE rthunk = rb_funcall(rthunks, rb_intern("[]"), 1, SIZET2NUM(i));
        VALUE rtype = rb_ivar_get(rthunk, rb_intern("@type"));
        ID type = SYM2ID(rtype);
        if (type == rb_intern("leaf")) {
            rb_funcall(rctx, SYM2ID(rb_ivar_get(rthunk, rb_intern("@action"))), 3, rthunk, rvalues, SIZET2NUM(index));
        } else if (type == rb_intern("node")) {
            rb_funcall(rctx, rb_intern("do_action"), 3, rb_ivar_get(rthunk, rb_intern("@thunks")), rb_ivar_get(rthunk, rb_intern("@values")), rb_ivar_get(rthunk, rb_intern("@index")));
        }
    }
    return rctx;
}

<%- @rules.each do |node| -%>
static VALUE pcc_evaluate_rule_<%= node.name %>(VALUE rctx);
<%- end -%>

<%- @rules.each do |node| -%>
static VALUE pcc_evaluate_rule_<%= node.name %>(VALUE rctx) {
    VALUE rchunk = rb_funcall(cThunkChunk, rb_intern("new"), 0);
    rb_ivar_set(rchunk, rb_intern("@pos"), rb_ivar_get(rctx, rb_intern("@cur")));
<%- if @location -%>
    rb_ivar_set(rchunk, rb_intern("@pos_loc"), rb_ivar_get(rctx, rb_intern("@cur_loc")));
<%- end -%>
    //PCC_DEBUG(NULL, PCC_DBG_EVALUATE, "<%= node.name %>", NUM2SIZET(rb_ivar_get(rctx, rb_intern("@level"))), NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos"))), (RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer"))) + NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos")))), (RSTRING_LEN(rb_ivar_get(rctx, rb_intern("@buffer"))) - NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos")))));
    rb_ivar_set(rctx, rb_intern("@level"), SIZET2NUM(NUM2SIZET(rb_ivar_get(rctx, rb_intern("@level"))) + 1));
    rb_funcall(rchunk, rb_intern("resize_captures"), 1, SIZET2NUM(<%= node.capts.length %>));
<%-   if node.vars.length > 0 -%>
    rb_ivar_set(rchunk, rb_intern("@values"), rb_ary_new());
<%-   end -%>
<%-   g = ::Packcr::Generator.new(node, @ascii, @location, :rb) -%>
<%-   r, str = g.generate_code_str(node.expr, 0, 4, false) -%>
<%=   str -%>
    rb_ivar_set(rctx, rb_intern("@level"), SIZET2NUM(NUM2SIZET(rb_ivar_get(rctx, rb_intern("@level"))) - 1));
    //PCC_DEBUG(NULL, PCC_DBG_MATCH, "<%= node.name %>", NUM2SIZET(rb_ivar_get(rctx, rb_intern("@level"))), NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos")))$1 (RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer"))) + NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos")))$1, (NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) - NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos")))$1);
    return rchunk;
<%-   if r != Packcr::CODE_REACH__ALWAYS_SUCCEED -%>
L0000:;
    rb_ivar_set(rctx, rb_intern("@level"), SIZET2NUM(NUM2SIZET(rb_ivar_get(rctx, rb_intern("@level"))) - 1));
    //PCC_DEBUG(NULL, PCC_DBG_NOMATCH, "<%= node.name %>", NUM2SIZET(rb_ivar_get(rctx, rb_intern("@level"))), NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos")))$1 (RSTRING_PTR(rb_ivar_get(rctx, rb_intern("@buffer"))) + NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos")))$1, (NUM2SIZET(rb_ivar_get(rctx, rb_intern("@cur"))) - NUM2SIZET(rb_ivar_get(rchunk, rb_intern("@pos")))$1);
    return Qnil;
<%-   end -%>
}

<%- end -%>

<%- @lheader.each do |code| -%>
<%=   hstream.get_code_block(code, 0, @iname) -%>
<%- end -%>

void Init_<%= prefix %>(void) {
    VALUE c<%= class_name %> = rb_const_get(rb_cObject, rb_intern("<%= class_name %>"));

    rb_define_method(c<%= class_name %>, "apply_rule", pcc_apply_rule, 4);
    rb_define_method(c<%= class_name %>, "do_action", pcc_do_action, 3);
    <%- @rules.each do |rule| -%>
    rb_define_method(c<%= class_name %>, "evaluate_rule_<%= rule.name %>", pcc_evaluate_rule_<%= rule.name %>, 0);
    <%- end -%>

    cLrEntry = rb_const_get(c<%= class_name %>, rb_intern("LrEntry"));

    cLrHead = rb_const_get(c<%= class_name %>, rb_intern("LrHead"));

    cLrAnswer = rb_const_get(c<%= class_name %>, rb_intern("LrAnswer"));

    cThunkLeaf = rb_const_get(c<%= class_name %>, rb_intern("ThunkLeaf"));
    cThunkNode = rb_const_get(c<%= class_name %>, rb_intern("ThunkNode"));

    cThunkChunk = rb_const_get(c<%= class_name %>, rb_intern("ThunkChunk"));

    cValue = rb_define_class_under(c<%= class_name %>, "Value", rb_cObject);
}
