<%- for_ref = has_ref ? "" : "_" -%>
#[allow(non_snake_case)]
fn evaluate_rule_<%= name %>(<% -%>
    <%- %>&mut self, <% -%>
    <%- %><%= for_ref %>offset: Position, <% -%>
    <%- %><%= for_ref %>limits: RuleLimit<% -%>
) -> Option<ThunkChunk> {
    let mut answer = ThunkChunk::new(self.input.position_offset);
    self.level += 1;
    answer.capts.resize(<%= capts.length %>);
    <%- unless vars.empty? -%>
    answer.values.clear();
    <%- end -%>
    <%- r = expr.reachability -%>
    <%- if r == Packcr::CODE_REACH__ALWAYS_SUCCEED -%>
    let _ = (|| {
        <%- -%><%= gen.generate_code(expr, 0, 8, false) -%>
        NOP
    })();
    self.level -= 1;
    Some(answer)
    <%- else -%>
    match (|| {
        <%- -%><%= gen.generate_code(expr, 0, 8, false) -%>
        NOP
    })() {
        NOP => {
            self.level -= 1;
            Some(answer)
        }
        _ => {
            self.level -= 1;
            None
        }
    }
    <%- end -%>
}
