%prefix "packcr::parser"

statement <- comment
           / spaces
           / directive_include
           / directive_string
           / directive_value
           / rule
           / footer
           / EOF
           ~ { @ctx.error __0sl.linenum + 1, __0sl.charnum + 1, "Illegal syntax" }

supported_language <- 'c'
                    / 'rb'
                    / identifier {
                      @ctx.error __0sl.linenum + 1, __0sl.charnum + 1, "Not supported language: #{$0}"
                    }

comment <- '#' [^\n]* (lf / EOF)

directive_include <- '%earlysource' opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| @ctx.code(:esource)  << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%source'      opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| @ctx.code(:source)   << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%lateheader'  opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| @ctx.code(:lheader)  << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%latesource'  opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| @ctx.code(:lsource)  << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%header'      opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| @ctx.code(:header)   << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%location'    opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| @ctx.code(:location) << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%initialize'  opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| @ctx.code(:init)     << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%earlycommon' opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| Packcr::BroadCast.new(@ctx.code(:eheader), @ctx.code(:esource)) << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%common'      opt_spaces_or_comments blocks:code_blocks { blocks.each { |b| Packcr::BroadCast.new(@ctx.code(:header),  @ctx.code(:source))  << Packcr::CodeBlock.new(b, $0sl.linenum, $0sl.charnum) } }
                   / '%' < identifier > opt_spaces_or_comments blocks:code_blocks { blocks.each { @ctx.error __0sl.linenum + 1, __0sl.charnum + 1, "Invalid directive: #{$1}" } }

code_blocks <- blocks:code_blocks opt_spaces_or_comments block:lang_code_block { blocks.push(block) if block; $$ = blocks }
             / block:lang_code_block { $$ = block ? [block] : [] }

directive_string <- '%value' opt_spaces_or_comments strings:lang_strings { strings.each { |str| @ctx.value_type = str } }
                  / '%auxil' opt_spaces_or_comments strings:lang_strings { strings.each { |str| @ctx.auxil_type = str } }
                  / '%prefix' opt_spaces_or_comments strings:lang_strings { strings.each { |str| @ctx.prefix = str } }
                  / '%' < identifier > opt_spaces_or_comments str:quotation_double { @ctx.error __0sl.linenum + 1, __0sl.charnum + 1, "Invalid directive: #{$1}" }

directive_value <- '%capture' spaces ('on' / 'true') { @ctx.capture_in_code = true }

lang_strings <- strings:lang_strings opt_spaces_or_comments string:lang_string { strings.push(string) if string; $$ = strings }
              / string:lang_string { $$ = string ? [string] : [] }

lang_string <- string:quotation_double { ____ = string }
             / < supported_language > opt_spaces_or_comments '->' opt_spaces_or_comments string:quotation_double { $$ = @ctx.lang == $1.to_sym ? string : nil  }

rule <- name:identifier opt_spaces_or_comments '<-' opt_spaces_or_comments expr:expression {
  return unless expr
  rule =  Packcr::Node::RuleNode.new(expr, name, $0sl.linenum, $0sl.charnum)
  @ctx.root.rules << rule
}

expression <- expr:expression opt_spaces_or_comments '/' 8< opt_spaces_or_comments seq:sequence { $$ = expr.alt(seq) }
            / seq:sequence { $$ = seq }

sequence <- seq:sequence opt_spaces_or_comments '8<' 8< opt_spaces_or_comments expr:term { $$ = seq.seq(expr, cut: true) }
          / seq:sequence opt_spaces_or_comments '~' 8< opt_spaces_or_comments code:lang_code_block { $$ = code ? Packcr::Node::ErrorNode.new(seq, Packcr::CodeBlock.new(code, $0sl.linenum, $0sl.charnum)) : seq }
          / seq:sequence opt_spaces_or_comments expr:term { $$ = seq.seq(expr) }
          / expr:term { $$ = expr }

term <- '&' 8< opt_spaces_or_comments node:quantity { $$ = Packcr::Node::PredicateNode.new(node) }
      / '!' 8< opt_spaces_or_comments node:quantity { $$ = Packcr::Node::PredicateNode.new(node, true) }
      / node:quantity { $$ = node }

quantity <- node:primary opt_spaces_or_comments '*' { $$ = Packcr::Node::QuantityNode.new(node, 0, -1) }
          / node:primary opt_spaces_or_comments '+' { $$ = Packcr::Node::QuantityNode.new(node, 1, -1) }
          / node:primary opt_spaces_or_comments '?' { $$ = Packcr::Node::QuantityNode.new(node, 0, 1) }
          / node:primary { $$ = node }

primary <- code:lang_code_block { $$ = code && Packcr::Node::ActionNode.new(Packcr::CodeBlock.new(code, $0sl.linenum, $0sl.charnum)) }
         / var_name:identifier opt_spaces_or_comments ':' 8< opt_spaces_or_comments name:identifier !( [ \t\v\f\r\n]* '<-' ) { $$ = Packcr::Node::ReferenceNode.new(name, var_name, $0sl.linenum, $0sl.charnum) }
         / '$$' opt_spaces_or_comments ':' 8< opt_spaces_or_comments name:identifier !( [ \t\v\f\r\n]* '<-' ) {
             ref = Packcr::Node::ReferenceNode.new(name, "_out", $0sl.linenum, $0sl.charnum)
             code = @ctx.pass_value_code("_out")
             act = Packcr::Node::ActionNode.new(Packcr::CodeBlock.new(code, $0sl.linenum, $0sl.charnum))
             $$ = ref.seq(act)
           }
         / name:identifier 8< !( [ \t\v\f\r\n]* '<-' ) { $$ = Packcr::Node::ReferenceNode.new(name, nil, $0sl.linenum, $0sl.charnum) }
         / '(' 8< opt_spaces_or_comments expr:expression opt_spaces_or_comments ')' { $$ = expr }
         / '<' 8< opt_spaces_or_comments expr:expression opt_spaces_or_comments '>' { $$ = Packcr::Node::CaptureNode.new(expr) }
         / '$' <[1-9][0-9]*> { $$ = Packcr::Node::ExpandNode.new($1.to_i - 1, $0sl.linenum, $0sl.charnum) }
         / '.' 8< { $$ = Packcr::Node::CharclassNode.new }
         / str:character_class { $$ = Packcr::Node::CharclassNode.new(Packcr.unescape_string(str, true)) }
         / str:quotation_single { $$ = Packcr::Node::StringNode.new(Packcr.unescape_string(str, false)) }
         / str:quotation_double { $$ = Packcr::Node::StringNode.new(Packcr.unescape_string(str, false)) }

character_class <- '[' <( [^\\\[\]] / '\[' / '\]' / '\\' )*> ']' { $$ = $1 }

lang_code_block <- code:code_block { ____ = code }
                 / < supported_language > opt_spaces_or_comments '->' opt_spaces_or_comments code:code_block { $$ = @ctx.lang == $1.to_sym ? code : nil  }
code_block <- '$' code:plain_code_block { $$ = code }
            / code:plain_code_block ${ ____ = code.gsub("$", @ctx.lang == :rb ? "__" : "_") }
plain_code_block <- '{' < [ \t\v\f\r\n]* opt_codes > '}' { $$ = $1 }
opt_codes <- (code [ \t\v\f\r\n]*)*
code <- codechar+
      / quotation_single
      / quotation_double
      / '{' code* '}'
codechar <- [^{}"'] / '\\\"' / '\\\'' / '\{' / '\}'
quotation_single <- '\'' < ( [^\\'\n] / '\\\'' / '\\\n' / '\\' [^\'\n] )*> '\'' { $$ = $1 }
quotation_double <- '\"' < ( [^\\"\n] / '\\\"' / '\\\n' / '\\' [^"\n] )*> '\"' { $$ = $1 }

identifier <- [a-zA-Z_] [a-zA-Z_0-9]* { $$ = $0 }

spaces <- ([ \t\v\f\r\n])+
opt_spaces_or_comments <- (comment / spaces)*
lf <- '\r'? '\n'

footer <- '%%' (lf / EOF) <.*> { @ctx.code(:lsource) << Packcr::CodeBlock.new($1, $1sl.linenum, $1sl.charnum) }

%location {
  class Location
    attr_reader :charnum, :linenum

    def initialize(charnum = 0, linenum = 0)
      @charnum = charnum
      @linenum = linenum
    end

    def +(other)
      if other.linenum == 0
        Location.new(@charnum + other.charnum, @linenum + other.linenum)
      else
        Location.new(           other.charnum, @linenum + other.linenum)
      end
    end

    def -(other)
      if other.linenum == self.linenum
        Location.new(@charnum - other.charnum, @linenum - other.linenum)
      elsif other.charnum == 0
        Location.new(@charnum - other.charnum, @linenum - other.linenum)
      else
        raise "unexpected location #{self.inspect} - #{other.inspect}"
      end
    end

    def forward(buffer, cur, n)
      Location.new(@charnum, @linenum).forward!(buffer, cur, n)
    end

    def forward!(buffer, cur, n)
      buffer[cur, n].scan(/(.*)(\n)?/) do
        if Regexp.last_match[2]
          @linenum += 1
          @charnum = 0
        else
          @charnum += Regexp.last_match[1].length
        end
      end
      self
    end
  end
}

%auxil "ctx = nil, ifile = nil"

%initialize {
  @ctx = ctx || self
  @ifile = ifile || stdin
  @utf8 = true
  @ascii = false
  @lang = :rb
}
%%

class Packcr::Parser
  def getc
    @ifile.getc
  end
end
