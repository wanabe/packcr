# This code is hereby placed in the public domain.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%prefix "calc"

%source {
#include <stdio.h>
#include <stdlib.h>
}

%location c ->{
    typedef struct packcr_location_tag {
        size_t pos;
        size_t lineno;
    } packcr_location_t;

    static inline void packcr_location_init(packcr_location_t *lp) {
        lp->pos = 0;
        lp->lineno = 0;
    }

    static inline void packcr_location_forward(packcr_location_t *lp, char *buf, size_t n) {
        size_t i = 0;
        for (; i < n; i++) {
            if (buf[i] == '\n') {
                lp->pos = 0;
                lp->lineno++;
            } else {
                lp->pos++;
            }
        }
    }

    static inline packcr_location_t packcr_location_add(packcr_location_t l1, packcr_location_t l2) {
        packcr_location_t l = {l1.pos + l2.pos, l1.lineno + l2.lineno};
        return l;
    }

    static inline packcr_location_t packcr_location_sub(packcr_location_t l1, packcr_location_t l2) {
        packcr_location_t l = {l1.pos - l2.pos, l1.lineno - l2.lineno};
        return l;
    }
} rs -> {
    #[derive(Copy, Clone)]
    struct Location {
        pos: usize,
        lineno: usize,
    }

    impl Location {
        fn new() -> Self {
            Self {
                pos: 0,
                lineno: 0,
            }
        }

        fn forward(&mut self, buf: &str) {
            for ch in buf.chars() {
                if ch == '\n' {
                    self.pos = 0;
                    self.lineno += 1;
                } else {
                    self.pos += 1;
                }
            }
        }

        fn add(&self, loc: &Self) -> Self {
            Self {
                pos: self.pos + loc.pos,
                lineno: self.lineno + loc.lineno,
            }
        }
    }
}

statement <- _ e:expression _ EOL c -> { printf("answer=%d\n", e); }  rs -> { println!("answer={}", e); }
           / ( !EOL . )* EOL      c -> { printf("error\n"); } rs -> { println!("error"); }

expression <- e:term { $$ = e; }

term <- l:term _ '+' _ r:factor { $$ = l + r; }
      / l:term _ '-' _ r:factor { $$ = l - r; }
      / e:factor                { $$ = e; }

factor <- l:factor _ '*' _ r:unary { $$ = l * r; }
        / l:factor _ '/' _ r:unary { $$ = l / r; }
        / e:unary                  { $$ = e; }

unary <- '+' _ e:unary { $$ = e; }
       / '-' _ e:unary { $$ = -e; }
       / e:primary     { $$ = e; }

primary <- < [0-9]+ > c -> {
               fprintf(stderr, "primary captured: '%s', pos [%ld, %ld]-[%ld, %ld]\n", $1, $1sl.pos, $1sl.lineno, $1el.pos, $1el.lineno);
               $$ = atoi($1);
           } rs -> {
               eprintln!("primary captured: '{}', pos [{}, {}]-[{}, {}]", $1, $1sl.pos, $1sl.lineno, $1el.pos, $1el.lineno);
               $$ = $1.parse::<i32>().unwrap_or(0);
           }
         / '(' _ e:expression _ ')' { $$ = e; }

_      <- [ \t]*
EOL    <- '\n' / '\r\n' / '\r' / ';'

%latesource c -> {
    int main() {
        calc_context_t *ctx = calc_create(NULL);
        while (calc_parse(ctx, NULL));
        calc_destroy(ctx);
        return 0;
    }
} rs -> {
  fn main() {
      let mut calc = Calc::new(std::io::stdin().lock());
      while !calc.input.closed {
          if calc.parse().is_none() {
            println!("Syntax error");
            break;
          }
      }
  }
}
