# This code is hereby placed in the public domain.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%prefix "calc"

%source {
#include <stdio.h>
#include <stdlib.h>

static inline void pcc_location_init(pcc_location_t *lp) {
    lp->pos = 0;
    lp->lineno = 0;
}

static inline void pcc_location_forward(pcc_location_t *lp, char *buf, size_t n) {
    size_t i = 0;
    for (; i < n; i++) {
        if (buf[i] == '\n') {
            lp->pos = 0;
            lp->lineno++;
        } else {
            lp->pos++;
        }
    }
}

static inline pcc_location_t pcc_location_add(pcc_location_t l1, pcc_location_t l2) {
    pcc_location_t l = {l1.pos + l2.pos, l1.lineno + l2.lineno};
    return l;
}

static inline pcc_location_t pcc_location_sub(pcc_location_t l1, pcc_location_t l2) {
    pcc_location_t l = {l1.pos - l2.pos, l1.lineno - l2.lineno};
    return l;
}
}

%location {
    size_t pos;
    size_t lineno;
}

statement <- _ e:expression _ EOL { printf("answer=%d\n", e); }
           / ( !EOL . )* EOL      { printf("error\n"); }

expression <- e:term { $$ = e; }

term <- l:term _ '+' _ r:factor { $$ = l + r; }
      / l:term _ '-' _ r:factor { $$ = l - r; }
      / e:factor                { $$ = e; }

factor <- l:factor _ '*' _ r:unary { $$ = l * r; }
        / l:factor _ '/' _ r:unary { $$ = l / r; }
        / e:unary                  { $$ = e; }

unary <- '+' _ e:unary { $$ = +e; }
       / '-' _ e:unary { $$ = -e; }
       / e:primary     { $$ = e; }

primary <- < [0-9]+ > {
               fprintf(stderr, "primary captured: '%s', pos [%ld, %ld]-[%ld, %ld]\n", $1, $1sl.pos, $1sl.lineno, $1el.pos, $1el.lineno);
               $$ = atoi($1);
           }
         / '(' _ e:expression _ ')' { $$ = e; }

_      <- [ \t]*
EOL    <- '\n' / '\r\n' / '\r' / ';'

%%
int main() {
    calc_context_t *ctx = calc_create(NULL);
    while (calc_parse(ctx, NULL));
    calc_destroy(ctx);
    return 0;
}
