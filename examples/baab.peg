S <- A 'b' c-> { printf("S0 %s\n", $0); } rb-> { printf("S0 %s\n", $0); } rs-> { println!("S0 {}", $0); }
   / 'b' c-> { printf("S1 %s\n", $0); } rb-> { printf("S1 %s\n", $0); } rs-> { println!("S1 {}", $0); }
A <- A 'a' c-> { printf("A0 %s\n", $0); } rb-> { printf("A0 %s\n", $0); } rs-> { println!("A0 {}", $0); }
   / S 'a' c-> { printf("A1 %s\n", $0); } rb-> { printf("A1 %s\n", $0); } rs-> { println!("A1 {}", $0); }

%source c-> {
  #define PACKCR_GETCHAR(auxil) packcr_getchar()
  int packcr_getchar() {
      static char str[] = "baab";
      static int i = 0;
      char c = str[i];
      if (c == 0) {
          return EOF;
      }
      i++;
      return (int)c;
  }
}

%latesource
  c -> {
    int main() {
        packcr_context_t *ctx = packcr_create(NULL);
        while (packcr_parse(ctx, NULL));
        packcr_destroy(ctx);
        printf("parsed\n");
        return 0;
    }
  }
  rb -> ${
    require "stringio"
    $stdin = StringIO.new("baab")
    Packcr.new.run
    puts "parsed"
  }
  rs -> ${
    fn main() {
        let mut parser = Packcr::new(&[b'b', b'a', b'a', b'b'][..]);
        while parser.parse() {}
        println!("parsed");
    }
  }