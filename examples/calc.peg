# This code is hereby placed in the public domain.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

%prefix "calc"

%earlysource c-> {
  #include <stdio.h>
  #include <stdlib.h>
}

statement <- _ e:expression _ EOL c -> { printf("answer=%d\n", e); } rb -> { puts "answer=#{e}\n" } rs -> { println!("answer={}", e); }
           / ( !EOL . )* EOL      c -> { printf("error\n"); } rb -> { warn "error\n" } rs -> { println!("error"); }

expression <- e:term { $$ = e; }

term <- l:term _ '+' _ r:factor { $$ = l + r; }
      / l:term _ '-' _ r:factor { $$ = l - r; }
      / e:factor                { $$ = e; }

factor <- l:factor _ '*' _ r:unary { $$ = l * r; }
        / l:factor _ '/' _ r:unary { $$ = l / r; }
        / e:unary                  { $$ = e; }

unary <- '+' _ e:unary { $$ = e; }
       / '-' _ e:unary { $$ = -e; }
       / e:primary     { $$ = e; }

primary <- < [0-9]+ >               c -> { $$ = atoi($1); } rb -> { $$ = $1.to_i } rs -> { $$ = $1.parse::<i32>().unwrap_or(0); }
         / '(' _ e:expression _ ')' { $$ = e; }

_      <- [ \t]*
EOL    <- '\n' / '\r\n' / '\r' / ';'

%latesource c -> {
    int main() {
        calc_context_t *ctx = calc_create(NULL);
        while (calc_parse(ctx, NULL));
        calc_destroy(ctx);
        return 0;
    }
} rb -> ${
  if ARGV[0]
    require "stringio"
    str = ARGV[0]
    $stdin = StringIO.new("#{str}\n", "r")
  else
    $stdin = ARGF
  end
  Calc.new.run
} rs -> {
  fn main() {
      let mut calc = Calc::new(std::io::stdin().lock());
      while calc.parse() {}
  }
}
